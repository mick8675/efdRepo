/****************************************************************
 *
 * Solers, Inc. as the author of Enterprise File Delivery 2.1 (EFD 2.1)
 * source code submitted herewith to the Government under contract
 * retains those intellectual property rights as set forth by the Federal 
 * Acquisition Regulations agreement (FAR). The Government has 
 * unlimited rights to redistribute copies of the EFD 2.1 in 
 * executable or source format to support operational installation 
 * and software maintenance. Additionally, the executable or 
 * source may be used or modified for by third parties as 
 * directed by the government.
 *
 * (c) 2009 Solers, Inc.
 ***********************************************************/
package com.solers.delivery;

import org.junit.Assert;

/**
 * Simple class to use with unit tests that require a wait until a condition is met.
 * Code is similar to  what is generated by SeleniumIDE's Java version of waitFor* commands
 * 
 */
public class Waiter {
    private final int timeout, sleep;
    
    public Waiter(int milliSecondsToWait) {
        this(milliSecondsToWait, 1000);
    }
    
    public Waiter(int milliSecondsToWait, int milliSecondsToSleep) {
        this.timeout = milliSecondsToWait;
        this.sleep = milliSecondsToSleep;
    }

    public boolean condition() throws TimeoutException {
        return true;
    }

    public void doWait() throws InterruptedException, TimeoutException {
        long start = System.currentTimeMillis(), duration = System.currentTimeMillis();
        while( (duration = System.currentTimeMillis() - start) < timeout) {
            if (duration >= timeout)
                Assert.fail("Timeout while waiting " + timeout + " milliseconds, testing condition every " + sleep + " milliseconds");
            try {
                if (condition())
                    break;
            } catch (TimeoutException toe){
                throw toe;
            } catch (Exception e) {
                //Swallow any other exceptions, the invoker of and implementation of condition() 
                //is responsible for handling any other exceptions that it will occur in condition()
            }
            Thread.sleep(sleep);
        }
    }
}

@SuppressWarnings("serial")
class TimeoutException extends InterruptedException {
}